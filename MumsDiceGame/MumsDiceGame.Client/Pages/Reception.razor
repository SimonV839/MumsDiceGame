@page "/reception"
@inherits LayoutComponentBase
@using Blazored.SessionStorage
@using DummyServices
@using Microsoft.AspNetCore.SignalR.Client
@using MumsDiceGame.Client.HubClients
@using System.Net

@inject IJSRuntime JS
@inject ILogger<Reception> logger
@inject ILoggerFactory loggerFactory
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage

@rendermode InteractiveServer

@implements IAsyncDisposable

<style>
.loader {
    position: absolute;
    border: 16px solid lightgrey;
    border-top: 16px solid blue; /* Blue */
    border-radius: 50%;
    width: 120px;
    height: 120px;
    animation: spin 2.3s linear infinite;
    background-color: rgba(255, 255, 255, 0.15);
}

@@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}
</style>

<h3>Reception</h3>

    <div>
        <div>
        @if (string.IsNullOrEmpty(currentUser))
        {
            <strong>Please, sign in...</strong>
        }
        else
        {
            <strong>Sign out, if requred...</strong>
        }
    </div>
        <label>
            User name (or alias):
        <input type="text" @bind="userNameInput" maxlength="12" autofocus disabled="@(IsBusy || !string.IsNullOrEmpty(currentUser))" />
        </label>
    </div>

    <div>
        @if (currentUser == null)
        {
            <button @onclick="SignIn" disabled="@IsBusy">Sign in</button>
        }
        else
        {
            <button @onclick="SignOut" disabled="@IsBusy">Sign out</button>
        }
    </div>

@if (IsBusy)
{
    <div class="loader">
        <div>
            @if (!IsSignInHubConnected)
            {
                <div>Connecting to Sign In Hub ...</div>
            }
            else if (IsAttemptingSignInOut)
            {
                @if(string.IsNullOrEmpty(currentUser))
                {
                    <div>Signing in ...</div>
                }
                else
                {
                    <div>Signing out ...</div>
                }
            }
        </div>
    </div>
}


@code {
    // TODO - blazer form - validation

    private SignInHubClient? hubClient;
    private string? userNameInput;
    private bool isAttemptingSignInOut = false;
    private string? currentUser;

    private bool IsSignInHubConnected => hubClient != null && hubClient.HubConnectionState != null && hubClient.HubConnectionState == HubConnectionState.Connected;
    private bool IsBusy => IsAttemptingSignInOut || !IsSignInHubConnected;

    private static IPAddress GetLocalIPAddress()
    {
        var host = Dns.GetHostEntry(Dns.GetHostName());
        foreach (var ip in host.AddressList)
        {
            if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
            {
                return ip;
            }
        }
        throw new ApplicationException("No network adapters with an IPv4 address in the system!");
    }

    private bool IsAttemptingSignInOut
    {
        get => isAttemptingSignInOut;
        set
        {
            if (isAttemptingSignInOut == value) { return; }

            isAttemptingSignInOut = value;
            StateHasChanged();
        }
    }

    private async void SignOut()
    {
        if (string.IsNullOrEmpty(currentUser))
        {
            // TODO need to update to form
            return;
        }

        IsAttemptingSignInOut = true;

        GameUser gameUser = new(currentUser, GetLocalIPAddress());

        var res = await hubClient.SignOut(gameUser);

        IsAttemptingSignInOut = false;

        if (res.IsSuccess)
        {
            currentUser = null;
            StateHasChanged();
            await SessionStorage.RemoveItemAsync("GameUser");
        }
        else
        {
            JS.InvokeVoidAsync("alert", $"Sign out failed.{Environment.NewLine}{Environment.NewLine}Reason: '{res.Error}'");
        }
    }

    private async void SignIn()
    {
        if (string.IsNullOrEmpty(userNameInput))
        {
            // TODO need to update to form
            return;
        }

        IsAttemptingSignInOut = true;

        GameUser gameUser = new(userNameInput, GetLocalIPAddress());

        var res = await hubClient.SignIn(gameUser);

        IsAttemptingSignInOut = false;

        if (res.IsSuccess)
        {
            currentUser = gameUser.UserName;
            StateHasChanged();
            await SessionStorage.SetItemAsync<string>("GameUser", currentUser);
        }
        else
        {
            JS.InvokeVoidAsync("alert", $"Sign in failed.{Environment.NewLine}{Environment.NewLine}Reason: '{res.Error}'");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var nav = Navigation;
        //hubClient = new SignInHubClient(nav);
        hubClient = Activator.CreateInstance(typeof(SignInHubClient), loggerFactory, nav) as SignInHubClient;
        if (hubClient == null)
        {
            throw new ApplicationException("Failed to create a SignInHubClient");
        }

        await hubClient.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            currentUser = await SessionStorage.GetItemAsync<string>("GameUser");
            userNameInput = currentUser;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    #region IAsyncDisposable
    public async ValueTask DisposeAsync()
    {
        await DisposeAsyncCore().ConfigureAwait(false);

        GC.SuppressFinalize(this);
    }

    protected virtual async ValueTask DisposeAsyncCore()
    {
        if (hubClient != null)
        {
            await hubClient.DisposeAsync();
            hubClient = null;
        }
    }
    #endregion IAsyncDisposable
}
