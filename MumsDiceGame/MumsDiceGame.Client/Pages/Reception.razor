@page "/reception"
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client
@using MumsDiceGame.Client.HubClients
@using DummyServices
@using System.Net

@inject IJSRuntime JS
@inject ILogger<Reception> logger
@inject ILogger<SignInHubClient> specLogger
@inject NavigationManager Navigation

@rendermode InteractiveServer

@implements IAsyncDisposable

<style>
.loader {
    border: 16px solid #f3f3f3; /* Light grey */
    border-top: 16px solid #3498db; /* Blue */
    border-radius: 50%;
    width: 120px;
    height: 120px;
    animation: spin 2s linear infinite;
}

@@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}
</style>

<h3>Reception</h3>

@if (IsBusy)
{
    <div class="loader">
    </div>
}
else
{
    <div>
        <label>
            User name (or alias):
            <input type="text" @bind="userNameInput" maxlength="12" autofocus/>
        </label>
    </div>

    <div>
        <button @onclick="SignIn">Sign in</button>
    </div>
}


@code {
    // TODO - blazer form - validation

    private SignInHubClient? hubClient;
    private string? userNameInput;
    private bool isAttemptingSignIn = false;

    private bool IsSignInHubConnected => hubClient != null && hubClient.HubConnectionState != null && hubClient.HubConnectionState == HubConnectionState.Connected;
    private bool IsBusy => isAttemptingSignIn || !IsSignInHubConnected;

    private static IPAddress GetLocalIPAddress()
    {
        var host = Dns.GetHostEntry(Dns.GetHostName());
        foreach (var ip in host.AddressList)
        {
            if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
            {
                return ip;
            }
        }
        throw new ApplicationException("No network adapters with an IPv4 address in the system!");
    }

    private async void SignIn()
    {
        logger.LogDebug("TODO SignIn started");

        if (hubClient == null)
        {
            throw new ApplicationException("Initialisatin of page failed");
        }

        if (string.IsNullOrEmpty(userNameInput))
        {
            // TODO need to update to form
            return;
        }

        isAttemptingSignIn = true;
        StateHasChanged();

        GameUser gameUser = new(userNameInput, GetLocalIPAddress());

        var res = await hubClient.SignIn(gameUser);

        isAttemptingSignIn = false;
        StateHasChanged();

        if (res.IsSuccess)
        {
            // TODO
        }
        else
        {
            JS.InvokeVoidAsync("alert", $"Sign in failed.{Environment.NewLine}Reason: '{res.Error}'");
        }

        logger.LogDebug("TODO SignIn finished");
    }

    protected override async Task OnInitializedAsync()
    {
        var nav = Navigation;
        //hubClient = new SignInHubClient(nav);
        hubClient = Activator.CreateInstance(typeof(SignInHubClient), specLogger, nav) as SignInHubClient;
        if (hubClient == null)
        {
            throw new ApplicationException("Failed to create a SignInHubClient");
        }

        await hubClient.StartAsync();
    }

    #region IAsyncDisposable
    public async ValueTask DisposeAsync()
    {
        await DisposeAsyncCore().ConfigureAwait(false);

        GC.SuppressFinalize(this);
    }

    protected virtual async ValueTask DisposeAsyncCore()
    {
        if (hubClient != null)
        {
            await hubClient.DisposeAsync();
            hubClient = null;
        }
    }
    #endregion IAsyncDisposable
}
