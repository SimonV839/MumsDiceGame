@page "/reception"
@inherits LayoutComponentBase
@using Blazored.SessionStorage
@using SimonV839.DummyServices
@using Microsoft.AspNetCore.SignalR.Client
@using SimonV839.MumsDiceGame.Client.HubClients
@using System.Net

@inject IJSRuntime JS
@inject ILogger<Reception> logger
@inject ILoggerFactory loggerFactory
@inject ISessionStorageService sessionStorage
@inject NavigationManager navigationManager

@rendermode InteractiveServer

@implements IAsyncDisposable

<style>
    .loader {
        position: absolute;
        border: 16px solid lightgrey;
        border-top: 16px solid blue; /* Blue */
        border-radius: 50%;
        width: 120px;
        height: 120px;
        animation: spin 2.3s linear infinite;
        background-color: rgba(255, 255, 255, 0.15);
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

<h3>Reception</h3>

<EditForm Model="@gameUser" OnSubmit="SubmitForm" FormName="ReceptionFormUnique">
    <div>
        <div>
            <strong>@InstructionString</strong>
        </div>
        <label>
            User name (or alias):
            <input type="text" @bind="gameUser.UserName" autofocus disabled="@(IsBusy || !string.IsNullOrEmpty(gameUser.UserName))" />
        </label>
        <div>
            <button type="submit" disabled="@IsBusy">@ActionString</button>
        </div>
    </div>

    @if (IsBusy)
    {
        <div class="loader">
            @if (!IsSignInHubConnected) { <div>Connecting to Sign In Hub ...</div> }
            else if (IsAttemptingSignInOut) { <div>@BusyString</div> }
        </div>
    }
</EditForm>


@code {
    // TODO - blazer form - validation

    private GameUser gameUser = new (string.Empty, GetLocalIPAddress());
    private SignInHubClient? hubClient;
    private bool isAttemptingSignInOut = false;
    private bool isSignedOut = true;

    private bool IsSignInHubConnected => hubClient != null && hubClient.HubConnectionState != null && hubClient.HubConnectionState == HubConnectionState.Connected;
    private bool IsBusy => IsAttemptingSignInOut || !IsSignInHubConnected;

    private string InstructionString => IsSignedOut ? "Please, sign in..." : "Sign out, if requred...";
    private string BusyString => IsSignedOut ? "Signing in ..." : "Signing out ...";
    private string ActionString => IsSignedOut ? "Sign in" : "Sign out";

    private static IPAddress GetLocalIPAddress()
    {
        var host = Dns.GetHostEntry(Dns.GetHostName());
        foreach (var ip in host.AddressList)
        {
            if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
            {
                return ip;
            }
        }
        throw new ApplicationException("No network adapters with an IPv4 address in the system!");
    }

    private bool IsAttemptingSignInOut
    {
        get => isAttemptingSignInOut;
        set
        {
            if (isAttemptingSignInOut == value) { return; }

            isAttemptingSignInOut = value;
            StateHasChanged();
        }
    }

    private bool IsSignedOut
    {
        get => isSignedOut;
        set
        {
            if (value == isSignedOut) { return; }
            isSignedOut = value;
            StateHasChanged();
        }
    }

    private void SubmitForm()
    {
        if (IsSignedOut) { SignIn(); }
        else { SignOut(); }
    }

    private async void SignOut()
    {
        if (IsSignedOut || hubClient == null)
        {
            // TODO need to update to form
            return;
        }

        IsAttemptingSignInOut = true;

        System.Diagnostics.Debug.Assert(!string.IsNullOrEmpty(gameUser.UserName), "Fix code. At this stage the user name must have been set.");
        var res = await hubClient.SignOut(gameUser);

        IsAttemptingSignInOut = false;

        if (res.IsSuccess)
        {
            IsSignedOut = true;
            await sessionStorage.RemoveItemAsync("GameUser");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", $"Sign out failed.{Environment.NewLine}{Environment.NewLine}Reason: '{res.Error}'");
        }
    }

    private async void SignIn()
    {
        if (!IsSignedOut || hubClient == null)
        {
            // TODO need to update to form
            return;
        }

        IsAttemptingSignInOut = true;

        System.Diagnostics.Debug.Assert(!string.IsNullOrEmpty(gameUser.UserName), "Fix code. At this stage the user name must have been set.");
        var res = await hubClient.SignIn(gameUser);

        IsAttemptingSignInOut = false;

        if (res.IsSuccess)
        {
            IsSignedOut = false;
            await sessionStorage.SetItemAsync<string>("GameUser", gameUser.UserName);

            var nav = $"{navigationManager.BaseUri}lounge";
            navigationManager.NavigateTo(nav);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", $"Sign in failed.{Environment.NewLine}{Environment.NewLine}Reason: '{res.Error}'");
        }
    }

    /* todo change to evacuate. currently the gui should not allow sign out unless explicitly requested
    private async void OnSignOutNotification(object? sender, GenericEventArgs<GameUser> gameUser)
        {
        // todo: change to evacuate
        // this may be due to a requested sign out (which is handled elsewhere as a response) or a ?fire alarm?
        if (gameUser?.EventData == null || currentUser == null)
        {
        return; // not signed in anyway
        }

        if (gameUser.EventData.UserName.Equals(currentUser) &&
            gameUser.EventData.UserAddress.Equals(GetLocalIPAddress()))
            {
            //  Simon: updating the gui from another thread
                await InvokeAsync(() =>
                    {
                    currentUser = null;
                    StateHasChanged();
                    sessionStorage.RemoveItemAsync("GameUser");
        });
    }
    }
    */

    protected override async Task OnInitializedAsync()
    {
        var nav = navigationManager;
        hubClient = Activator.CreateInstance(typeof(SignInHubClient), loggerFactory, nav) as SignInHubClient;
        if (hubClient == null)
        {
            throw new ApplicationException("Failed to create a SignInHubClient");
        }

        await hubClient.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            gameUser.UserName = await sessionStorage.GetItemAsync<string>("GameUser");
            IsSignedOut = string.IsNullOrEmpty(gameUser.UserName);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    #region IAsyncDisposable
    public async ValueTask DisposeAsync()
    {
        await DisposeAsyncCore().ConfigureAwait(false);

        GC.SuppressFinalize(this);
    }

    protected virtual async ValueTask DisposeAsyncCore()
    {
        if (hubClient != null)
        {
            await hubClient.DisposeAsync();
            hubClient = null;
        }
    }
    #endregion IAsyncDisposable
}
